// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String?  @unique
  originalEmail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens     Token[]
  status    String @default("active")

  cart Cart[]
  order Order[]
}

model Token {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId    Int

  @@index([userId])
}

model Product {
  id       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  image     String
  name      String
  price     Int 
  description String @db.MediumText
  size String?
  stockQuantity Int @default(0)
  modelNumber String?
  localImage String?

  cart Cart[]
  orderItem OrderItem[]  //Please note that Order Can have multiple products but quantity in the
  preOrderItem PreOrderItem[]
  productImage ProductImage[]
  productEventDay ProductEventDay[]
  productSubMenuCategory ProductSubMenuCategory?

  group   Group?     @relation(fields: [groupId], references: [id])
  groupId Int? 

  @@index([groupId])
}

model ProductImage {
  id       Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  image  String
  orderIndex Int @default(0)
  product   Product     @relation(fields: [productId], references: [id], onDelete:Cascade)
  productId    Int     

  @@index([productId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int 
  product   Product  @relation(fields: [productId], references: [id],  onDelete: Cascade)
  productId Int
  quantity  Int @default(0)

  @@index([userId])
  @@index([productId])
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  useSameAddress Boolean?

  shippingAddress ShippingAddress?
  billingAddress BillingAddress?
  status    String?
  paymentType String?
  orderNumber String?
  deliveryStatus String? @default("Preparing")
  deliveryDate DateTime?

  orderItem OrderItem[] 
  preOrderItem PreOrderItem[] 

  stripePayment StripePayment?

  orderPlacedDate DateTime @default(now())
  totalCostBeforeTax Decimal @default(0)
  totalCostAfterTax Decimal @default(0)
  tax Decimal @default(0)
  shipping Decimal @default(0)

  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  quantity  Int?

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?

  @@index([productId])
  @@index([orderId])
}

model PreOrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  quantity  Int?

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?

  @@index([productId])
  @@index([orderId])
}

 model ShippingAddress{
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    firstName String?
    lastName String?
    address String?
    city String?
    province String?
    postCode String?
    phone String? 
    email String?

    order     Order     @relation(fields: [orderId], references: [id], onDelete:Cascade)
    orderId    Int     @unique
 }

 model BillingAddress{
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    firstName String?
    lastName String?
    address String?
    city String?
    province String?
    postCode String?
    phone String? 

    order     Order     @relation(fields: [orderId], references: [id], onDelete:Cascade)
    orderId    Int     @unique
 }

 model EventDays {
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    eventIndex Int
    image String?
    visibility Boolean @default(true)

    productEventDay ProductEventDay[]
 }
 

 model ProductEventDay {
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    eventDays   EventDays     @relation(fields: [eventDaysId], references: [id])
    eventDaysId    Int   

    product   Product     @relation(fields: [productId], references: [id])
    productId    Int    
     
    @@index([eventDaysId])
    @@index([productId]) 
}

model MenuCategory{
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    categoryDisplay String
    category String 
    categoryIndex Int?
    description String?
    subDescription String?
    visibility Boolean @default(true)
    
    subMenuCategory SubMenuCategory[]
}

model SubMenuCategory {
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subCategoryDisplay String
    subCategory String?
    subcategoryIndex Int?
    visibility Boolean @default(true)

    platform String @default("both")
    image String?

    menu   MenuCategory     @relation(fields: [menuCategoryId], references: [id])
    menuCategoryId Int @map("menuId")
   

    productSubMenuCategory ProductSubMenuCategory[]
    @@index([menuCategoryId])
}

model ProductSubMenuCategory {
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    product   Product     @relation(fields: [productId], references: [id])
    productId    Int     @unique

    subMenuCategory   SubMenuCategory     @relation(fields: [subMenuCategoryId], references: [id])
    subMenuCategoryId    Int   

    @@index([subMenuCategoryId])
    @@index([productId]) 
}

model StripePayment{
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    csID String? @db.MediumText
    amount_total Int? //cents
    city String?
    country String?
    line1 String?
    line2 String?
    post_code String?
    state String? //province

    email String?
    name String?
    phone String?

    piId String? @db.MediumText
    amount_received Int?
    client_secret String? @db.MediumText
    payment_method String? @db.MediumText

    payment_status String?

  order      Order     @relation(fields: [orderId], references: [id], onDelete:Cascade)
  orderId    Int     @unique
    
}

model ErrorLog{
   id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    errorPage String
    errorMessage String? @db.MediumText
}

model EmailLog {
     id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    to String 
    from String
    subject String? @db.MediumText
    body String? @db.MediumText
    response String? @db.MediumText
}

model Group {
     id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    product Product[]
}

model Admin{
    id       Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    password String @unique
}